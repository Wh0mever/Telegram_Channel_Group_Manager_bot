import asyncio
import json
import logging
import sys

from aiogram.types import Message, CallbackQuery, ChatJoinRequest
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile
from aiogram.filters import Command
from aiogram import Router, F, Bot

from secrets import token_hex

from preload import functions
from preload.databases import *
from preload.config import *
from preload.states import *
from preload.keyboard import *


router = Router()
bot = Bot(TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(name)s - %(message)s')

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
file_handler = logging.FileHandler("logs/handlers.log", mode="w", encoding='utf-8')
file_handler.setFormatter(formatter)
logger.addHandler(file_handler)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
console_handler = logging.StreamHandler(sys.stdout)
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)


@router.message(Command(commands=['start']))
async def start_func(message: Message, state: FSMContext):
    if message.from_user.id in admin_ids:
        await message.answer(f'üëã <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.first_name}!</b>\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –±–æ—Ç–∞ –ø—Ä–∏—ë–º–∞ –∑–∞—è–≤–æ–∫.',
                             parse_mode='HTML', reply_markup=admin_kbs)
    else:
        if len(cur2.execute('select * from data where id == ?', (message.from_user.id, )).fetchall()) != 0:
            info = {
                'id': message.from_user.id,
                'first_name': message.from_user.first_name,
                'username': message.from_user.username
            }
            cur2.execute('update data set info == ? where id == ?', (json.dumps(info), message.from_user.id))
            base2.commit()
            await message.answer(
                f'üëã <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.first_name}!</b>\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –±–æ—Ç–∞ –ø—Ä–∏—ë–º–∞ –∑–∞—è–≤–æ–∫.',
                parse_mode='HTML', reply_markup=manag_kbs)
        pass

@router.message(F.text)
async def text_hand_func(message: Message, state: FSMContext):
    if message.from_user.id not in admin_ids and len(cur2.execute('select * from data where id == ?', (message.from_user.id, )).fetchall()) == 0:
        if len(cur.execute('select * from data where id == ?', (message.from_user.id, )).fetchall()) == 0:
            info = {
                'id': message.from_user.id,
                'first_name': message.from_user.first_name,
                'last_name': message.from_user.last_name,
                'username': message.from_user.username,
                'language': message.from_user.language_code
            }
            cur.execute('insert into data values (?, ?, ?, ?)', (message.from_user.id, 0, json.dumps(info), 1))
            base.commit()
        await message.answer('''–°–ø–∞—Å–∏–±–æ, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏, —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç. 
–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏.''')


@router.chat_join_request()
async def start1(update: ChatJoinRequest):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.from_user.id} –≤ —á–∞—Ç {update.chat.id}")
    try:
        if len(cur3.execute('select * from data where id == ?', (update.chat.id, )).fetchall()) != 0:
            select = cur3.execute('select * from data where id == ?', (update.chat.id, )).fetchone()
            post = select[2]
            turn = select[3]
            if turn == 1:
                info = {
                    'id': update.from_user.id,
                    'first_name': update.from_user.first_name,
                    'last_name': update.from_user.last_name,
                    'username': update.from_user.username,
                    'language': update.from_user.language_code
                }
                try:
                    if len(cur.execute('select * from data where id == ?', (update.from_user.id, )).fetchall()) == 0:
                        cur.execute('insert into data values (?, ?, ?, ?)', (update.from_user.id, update.chat.id, json.dumps(info), 1))
                        base.commit()
                        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.from_user.id} –¥–ª—è –∫–∞–Ω–∞–ª–∞ {update.chat.id}")
                    else:
                        cur.execute('update data set channel == ? where id == ?', (update.chat.id, update.from_user.id))
                        base.commit()
                        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.from_user.id}")

                    keys = [[KeyboardButton(text='ü§∑‚Äç‚ôÇÔ∏è –Ø —á–µ–ª–æ–≤–µ–∫')]]
                    keys = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=keys)
                    await bot.send_message(update.from_user.id, f'''{update.from_user.first_name}, —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª.
–Ø –∞–Ω—Ç–∏-—Å–ø–∞–º –±–æ—Ç.
–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–æ–≥–æ, —á—Ç–æ –≤—ã –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É
<b>¬´–Ø —á–µ–ª–æ–≤–µ–∫¬ª</b>
–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ.''', parse_mode='HTML', reply_markup=keys)

                    await asyncio.sleep(60)

                    try:
                        if post != 'hi!':
                            post = json.loads(post)
                            kbs = post['kbs']
                            message_kbs = []
                            for row in kbs:
                                k = []
                                for row2 in row:
                                    k.append(InlineKeyboardButton(text=row2['text'], url=row2['url']))
                                message_kbs.append(k)
                            kbs = InlineKeyboardMarkup(inline_keyboard=message_kbs)
                            await bot.copy_message(update.from_user.id, post['chat_id'], post['message_id'], reply_markup=kbs,
                                               parse_mode='HTML')
                            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.from_user.id}")
                        else:
                            await bot.send_message(update.from_user.id, post)
                            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.from_user.id}")

                        await update.approve()
                        logger.info(f"–ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.from_user.id} –æ–¥–æ–±—Ä–µ–Ω–∞")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.from_user.id}: {e}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.from_user.id}: {e}")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏: {e}")
