from preload.databases import *
from preload.config import *
from preload.states import *
from preload.keyboard import *
from preload.logger_config import setup_logger

from aiogram import Bot
from aiogram.types import FSInputFile
from secrets import token_hex
import json
import logging
import sys

bot = Bot(TOKEN)
logger = setup_logger()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(name)s - %(message)s')

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
file_handler = logging.FileHandler("logs/functions.log", mode="w", encoding='utf-8')
file_handler.setFormatter(formatter)
logger.addHandler(file_handler)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
console_handler = logging.StreamHandler(sys.stdout)
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)

#id integer, info text, message text, turn integer
async def generate_channels():
    select = cur3.execute('select * from data').fetchall()
    kbs = []
    for row in select:
        info = json.loads(row[1])
        text = f'‚úî {info["title"]}' if row[3] == 1 else f'‚úñ {info["title"]}'
        kbs.append([InlineKeyboardButton(text = text, callback_data=f'select_channel_{row[0]}')])
    kbs.append([InlineKeyboardButton(text = '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª', callback_data='add_channel')])
    kbs = InlineKeyboardMarkup(inline_keyboard=kbs)
    return kbs


async def generate_one_channel(id):
    select = cur3.execute('select * from data where id == ?', (id, )).fetchone()
    info = json.loads(select[1])
    kbs = [[InlineKeyboardButton(text = 'üñã –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data=f'edit_message_{id}')],
           [InlineKeyboardButton(text = 'üëÅ –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data=f'show_message_{id}')],
           [InlineKeyboardButton(text = '–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–∏—ë–º' if select[3] == 0 else '–í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–∏—ë–º', callback_data=f'turn_channel_{id}')],
           [InlineKeyboardButton(text = 'üóë –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª', callback_data=f'delete_channel_{id}')],
           [InlineKeyboardButton(text = '‚Üê –ù–∞–∑–∞–¥', callback_data='back_to_channels')]]
    kbs = InlineKeyboardMarkup(inline_keyboard=kbs)
    colvo = len(cur.execute('select * from data where channel == ?', (id, )).fetchall())
    text = f'–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º <a href="{info["link"]}">{info["title"]}</a>' if info['link'] else f'–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º <b>{info["title"]}</b>'
    text += '\n\n–ê–≤—Ç–æ–ø—Ä–∏—ë–º: <b>–≤–∫–ª—é—á–µ–Ω</b>' if select[3] == 1 else '\n\n–ê–≤—Ç–æ–ø—Ä–∏—ë–º: <b>–≤—ã–∫–ª—é—á–µ–Ω</b>'
    text += f'\n–õ—é–¥–µ–π –≤ –±–∞–∑–µ: <b>{colvo}—á–µ–ª.</b>'
    return kbs, text



async def check_admin(message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ/—á–∞—Ç–µ"""
    logger.info(f"–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è: {message.message_id}")
    
    async def verify_admin_status(chat_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ"""
        try:
            bot_info = await bot.get_me()
            member = await bot.get_chat_member(chat_id, bot_info.id)
            chat = await bot.get_chat(chat_id)
            
            required_rights = {
                'can_invite_users': True,
                'can_manage_chat': True,
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞
            if member.status != 'administrator':
                logger.warning(f"–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —á–∞—Ç–µ {chat_id}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø—Ä–∞–≤
            for right, required in required_rights.items():
                if not getattr(member, right, False):
                    logger.warning(f"–£ –±–æ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–æ {right} –≤ —á–∞—Ç–µ {chat_id}")
                    return False
            
            channel_info = {
                'id': chat.id,
                'title': chat.title,
                'link': chat.invite_link
            }
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ: {channel_info}")
            return channel_info
            
        except Exception as err:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {err}")
            return False
    
    if message.forward_from_chat:
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–≤–∞—Ä–¥–∞ –∏–∑ —á–∞—Ç–∞ {message.forward_from_chat.id}")
        return await verify_admin_status(message.forward_from_chat.id)
    else:
        try:
            chat_id = int(message.text)
            chat_id = chat_id * -1 if chat_id > 0 else chat_id
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Ç–∞ –ø–æ ID: {chat_id}")
            return await verify_admin_status(chat_id)
        except ValueError:
            logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞")
            return None
        except Exception as err:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ID —á–∞—Ç–∞: {err}")
            return None


async def generate_spam_channels(data):
    select_channels = data['select_channels']
    kbs = []
    chans = cur3.execute('select * from data').fetchall()
    for row in chans:
        info = json.loads(row[1])
        text = f'{info["title"]}' if row[0] not in select_channels else f'‚úîÔ∏è {info["title"]}'
        kbs.append([InlineKeyboardButton(text = text, callback_data=f'select_spamchan_{row[0]}')])
    kbs.append([InlineKeyboardButton(text = '–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data='start_spam')])
    kbs.append([InlineKeyboardButton(text = '‚Üê –ù–∞–∑–∞–¥', callback_data='back_to_start')])
    kbs = InlineKeyboardMarkup(inline_keyboard=kbs)
    return kbs

async def get_stat_func():
    all_users = len(cur.execute('select * from data').fetchall())
    life_users = len(cur.execute('select * from data where life == ?', (1, )).fetchall())
    block_users = all_users-life_users
    text = f'<b>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{all_users} —á–µ–ª.</b>\n–ò–∑ –Ω–∏—Ö:\n –ñ–∏–≤—ã–µ: <b>{life_users} —á–µ–ª.</b>\n –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: <b>{block_users} —á–µ–ª.</b>'
    channels = cur3.execute('select * from data').fetchall()
    if len(channels) != 0:
        text += '\n\n\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º</b>'
        for row in channels:
            info = json.loads(row[1])
            all_users = len(cur.execute('select * from data where channel == ?', (row[0], )).fetchall())
            life_users = len(cur.execute('select * from data where life == ? and channel == ?', (1, row[0])).fetchall())
            block_users = all_users - life_users
            text += f'\n\n<b>{info["title"]}</b>\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{all_users} —á–µ–ª.</b>\n–ò–∑ –Ω–∏—Ö:\n –ñ–∏–≤—ã–µ: <b>{life_users} —á–µ–ª.</b>\n –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: <b>{block_users} —á–µ–ª.</b>'
    return text
#id integer, info text
async def generate_admins():
    select = cur2.execute('select * from data').fetchall()
    kbs = []
    for row in select:
        info = json.loads(row[1])
        text = f'ID: {row[0]}' if info == None else f'{info["first_name"]}'
        kbs.append([InlineKeyboardButton(text = text, callback_data=f'select_admin_{row[0]}')])
    kbs.append([InlineKeyboardButton(text = '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞', callback_data='add_admin')])
    kbs = InlineKeyboardMarkup(inline_keyboard=kbs)
    return kbs