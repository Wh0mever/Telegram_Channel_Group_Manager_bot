import json

from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile
from aiogram.filters import Command
from aiogram import Router, F, Bot

from secrets import token_hex

from preload import functions
from preload.databases import *
from preload.config import *
from preload.states import *
from preload.keyboard import *


router = Router()
bot = Bot(TOKEN)


import logging
logging.basicConfig(level=logging.INFO, filename="logs/handlers.log",filemode="w")


@router.callback_query(F.data == 'back_to_admins')
async def back_to_admins_func(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id in admin_ids:
        await state.clear()
        kbs = await functions.generate_admins()
        await callback.message.edit_text('–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∞–º–∏ –±–æ—Ç–∞', reply_markup=kbs)

@router.callback_query(F.data == 'add_admin')
async def add_admin_func(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id in admin_ids:
        kbs = [[InlineKeyboardButton(text = '‚Üê –ù–∞–∑–∞–¥', callback_data='back_to_admins')]]
        kbs = InlineKeyboardMarkup(inline_keyboard=kbs)
        await callback.message.edit_text('–ü–µ—Ä–µ—à–ª–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞ –∏–ª–∏ –ø—Ä–∏—à–ª–∏ –µ–≥–æ –∞–π–¥–∏.', reply_markup=kbs)
        await state.set_state(aForm.admin_message)

@router.message(F.content_type.in_(any), aForm.admin_message)
async def admin_message_func(message: Message, state: FSMContext):
    if message.from_user.id in admin_ids:
        if message.forward_from:
            admin_id = message.forward_from.id
        else:
            try:
                admin_id = int(message.text)
            except:
                admin_id = 0
        if admin_id != 0:
            if len(cur2.execute('select * from data where id == ?', (admin_id,)).fetchall()) == 0:
                cur2.execute('insert into data values (?, ?)', (admin_id, json.dumps(None)))
                base2.commit()
                await message.answer('–ê–¥–º–∏–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n<i>–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ–Ω —Å–º–æ–≥ –ø–µ—Ä–µ–π—Ç–∏ –≤ –ø–∞–Ω–µ–ª—å, –æ–Ω –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–ø–∏—Å–∞—Ç—å /start –≤ –±–æ—Ç–∞</i>',
                                     parse_mode='HTML')
                await state.clear()
                kbs = await functions.generate_admins()
                await bot.send_message(message.from_user.id, '–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∞–º–∏ –±–æ—Ç–∞', reply_markup=kbs)
            else:
                await message.answer('–ê–¥–º–∏–Ω —Å —ç—Ç–∏–º –∞–π–¥–∏ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ!')
        else:
            await message.answer('–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞ –∏–ª–∏ –µ–≥–æ –∞–π–¥–∏..')


@router.callback_query(F.data.startswith('select_admin_'))
async def select_admin_func(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id in admin_ids:
        admin_id = int(callback.data.split('_')[-1])
        select = cur2.execute('select * from data where id == ?', (admin_id, )).fetchone()
        info = json.loads(select[1])
        if info != None:
            text = f'–ê–¥–º–∏–Ω <a href="tg://user?id={admin_id}>{info["first_name"]}</a>\n\n–ê–π–¥–∏: <code>{admin_id}</code>\n–Æ–∑–µ—Ä–Ω–µ–π–º: {"@"+info["username"] if info["username"] else "–Ω–µ—Ç"}'
        else:
            text = f'–ê–¥–º–∏–Ω —Å ID <code>{admin_id}</code>\n\n<i>–ï–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è, –∑–Ω–∞—á–∏—Ç –æ–Ω –µ—â—ë –Ω–µ –ø—Ä–æ–ø–∏—Å–∞–ª –∫–æ–º–∞–Ω–¥—É /start –≤ –±–æ—Ç–∞.</i>'
        kbs = [[InlineKeyboardButton(text = 'üóë –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞', callback_data=f'delete_admin_{admin_id}')],
               [InlineKeyboardButton(text = '‚Üê –ù–∞–∑–∞–¥', callback_data='back_to_admins')]]
        kbs = InlineKeyboardMarkup(inline_keyboard=kbs)
        await callback.message.edit_text(text, parse_mode='HTML', reply_markup=kbs)


@router.callback_query(F.data.startswith('delete_admin'))
async def delete_admin_func(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id in admin_ids:
        admin_id = int(callback.data.split('_')[-1])
        kbs = [[InlineKeyboardButton(text = '–î–∞, —É–¥–∞–ª–∏—Ç—å', callback_data=f'yes_admindel_{admin_id}')],
               [InlineKeyboardButton(text = '–ù–µ—Ç, –æ—Ç–º–µ–Ω–∞', callback_data=f'select_admin_{admin_id}')]]
        kbs = InlineKeyboardMarkup(inline_keyboard=kbs)
        await callback.message.edit_text('–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞?', reply_markup=kbs)

@router.callback_query(F.data.startswith('yes_admindel'))
async def yes_admindel_func(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id in admin_ids:
        admin_id = int(callback.data.split('_')[-1])
        cur2.execute('delete from data where id == ?', (admin_id, ))
        base2.commit()
        cur2.execute('vacuum')
        await callback.answer('–ê–¥–º–∏–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!', show_alert=True)
        kbs = await functions.generate_admins()
        await callback.message.edit_text('–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∞–º–∏ –±–æ—Ç–∞', reply_markup=kbs)
