from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile
from aiogram.filters import Command
from aiogram import Router, F, Bot

from secrets import token_hex

from preload import functions
from preload.databases import *
from preload.config import *
from preload.states import *
from preload.keyboard import *


router = Router()
bot = Bot(TOKEN)


import logging
logging.basicConfig(level=logging.INFO, filename="logs/handlers.log",filemode="w")


@router.callback_query(F.data == 'back_to_start')
async def back_to_start_func(callback: CallbackQuery, state: FSMContext):
    if len(cur2.execute('select * from data where id == ?', (callback.from_user.id,)).fetchall()) != 0 or callback.from_user.id in admin_ids:
        await state.clear()
        await callback.message.edit_text(
            f'üëã <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {callback.from_user.first_name}!</b>\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –±–æ—Ç–∞ –ø—Ä–∏—ë–º–∞ –∑–∞—è–≤–æ–∫.',
            parse_mode='HTML')

#
@router.message(F.text == 'üóÑ –ö–∞–Ω–∞–ª—ã')
async def channels_func(message: Message, state: FSMContext):
    if len(cur2.execute('select * from data where id == ?', (message.from_user.id,)).fetchall()) != 0 or message.from_user.id in admin_ids:
        await state.clear()
        kbs = await functions.generate_channels()
        await message.answer('–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏', reply_markup=kbs)

@router.message(F.text == 'üí¨ –†–∞—Å—Å—ã–ª–∫–∞')
async def spam_func(message: Message, state: FSMContext):
    if len(cur2.execute('select * from data where id == ?', (message.from_user.id,)).fetchall()) != 0 or message.from_user.id in admin_ids:
        await state.clear()
        kbs = [[InlineKeyboardButton(text = '‚Üê –ù–∞–∑–∞–¥', callback_data='back_to_start')]]
        kbs = InlineKeyboardMarkup(inline_keyboard=kbs)
        await message.answer('–ü—Ä–∏—à–ª–∏ –º–Ω–µ –ø–æ—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=kbs)
        await state.set_state(aForm.spam_post)

@router.message(F.text == 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def stat_func(message: Message, state: FSMContext):
    if len(cur2.execute('select * from data where id == ?', (message.from_user.id,)).fetchall()) != 0 or message.from_user.id in admin_ids:
        await state.clear()
        text = await functions.get_stat_func()
        await message.answer(text, parse_mode='HTML')

@router.message(F.text == 'üë§ –ê–¥–º–∏–Ω—ã')
async def admins_func(message: Message, state: FSMContext):
    if message.from_user.id in admin_ids:
        await state.clear()
        kbs = await functions.generate_admins()
        await message.answer('–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∞–º–∏ –±–æ—Ç–∞', reply_markup=kbs)

